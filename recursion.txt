1) basic recurrsion

public class Main
{   
    public static int recurrsion(int count){
        if(count==4){
            return 0;
        }
        return recurrsion(count+1);

    }
    
	public static void main(String[] args) {
	    int count=0;
		System.out.println(recurrsion(count));
	}
}

2)print n times


public class Main
{   
    public static int print(int n,String str){
        if(n<=0){
            return 0;
        }
        System.out.println(str);
        return print(n-1,str);

    }
    
	public static void main(String[] args) {
	    String str="Divya";
	    int n=5;
		System.out.println(print(n,str));
	}
}

3)print linearly from 1 to n numbers

public class Main
{   
    public static int print(int n,int i){
        if(i>n){
            return 0;
        }
        System.out.println(i);
        return print(n,i+1);

    }
    
	public static void main(String[] args) {
	    int n=5,i=1;
	    print(n,i);
		//System.out.println(print(n,1));
	}
}

4)print in reverse i.e n to 1

public class Main
{   
    public static int print(int n,int i){
        if(i<=0){
            return 0;
        }
        System.out.println(i);
        return print(n,i-1);

    }
    
	public static void main(String[] args) {
	    int n=5;
	    print(n,n);
		//System.out.println(print(n,1));
	}
}

5)print linearly from 1 to n numbers using backtracking


public class Main {
    public static void print(int n, int i) {
        if (i <= 0) {
            return ;
        }
        print(n, i - 1);          
        System.out.println(i);    
    }

    public static void main(String[] args) {
        int n = 5;
        print(n, n); 
    }
}

6)print in reverse i.e n to 1 using backtracking

public class Main{
    
    public static void print(int n,int i){
        if(i>n){
            return;
        }
        print(n,i+1);
        System.out.println(i);
    }
    
    public static void main(String args[]){
        int n=5,i=1;
        print(n,i);
    }
}

7) sum of n numbers--parameterized

public class Main{
    
    public static int sum(int i,int n){
        if(n<0){
            return i;
        }
        //System.out.println(n);
       
         return sum(i+n,n-1);
    }
    
    public static void main(String args[]){
        int n=5;
        int res=sum(0,n);
        System.out.println("Sum from 0 to " + n + " is: " + res);
    }
}

8) sum of n numbers--functional

public class Main{
    
    public static int sum(int n){
        if(n==0){
            return 0;
        }
        //System.out.println(n);
        return n + sum(n-1);
    }
    
    public static void main(String args[]){
        int n=5;
        int res=sum(n);
        System.out.println("Sum from 0 to " + n + " is: " + res);
    }
}

9) factorial of n numbers--recursive
 
public class Main{
    
    public static int fact(int prod,int n){
        if(n<=1){
            return prod;
        }
        //System.out.println(n);
        return fact(prod*n,n-1);
    }
    
    public static void main(String args[]){
        int n=3,prod=1;
        int res=fact(prod,n);
        System.out.println("Factorial from 0 to " + n + " is: " + res);
    }
}

10)factorial of n numbers--functional

public class Main{
    
    public static int fact(int n){
        if(n==1){
            return 1;
        }
        //System.out.println(n);
        return n * fact(n-1);
    }
    
    public static void main(String args[]){
        int n=3;
        int res=fact(n);
        System.out.println("Factorial from 0 to " + n + " is: " + res);
    }
}

11)fibonacci series

public class Main{
    
    public static int fibo(int n){
        if(n<=1){
            return n;
        }
        //System.out.println(n);
        return fibo(n-1)+fibo(n-2);
    }
    
    public static void main(String args[]){
        int n=8;
        int res=fibo(n);
        System.out.println("Fibonaaci from 0 to " + n + " is: " + res);
    }
}

12)string is pallindrome

public class Main {

    public static boolean isPalindrome(int i, String s) {
        int n = s.length();
        if (i >= n / 2) {
            return true;
        }
        if (s.charAt(i) != s.charAt(n - i - 1)) {
            return false;
        }
        return isPalindrome(i + 1, s);
    }

    public static void main(String[] args) {
        String s = "madam";
        boolean result = isPalindrome(0, s);
        System.out.println("Is \"" + s + "\" a palindrome? " + result);
    }
}

13)reverse an array

public class Main {
    public static void reverse(int[] arr, int start, int end) {
        if (start >= end) {
            return; 
        }

        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        reverse(arr, start + 1, end - 1);
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        reverse(arr, 0, arr.length - 1); 
        System.out.println("Reversed array:");
        printArray(arr);
    }
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
    }
}


