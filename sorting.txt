1) Selection sort

public class Main
{
	public static void main(String[] args) {
	    int arr[]={13,40,24,52,20,9};
	    int n=arr.length;
	    for(int i=0;i<=n-2;i++){
	        int min=i;
	        for(int j=i;j<=n-1;j++){
	            if(arr[j]<arr[min])
	                min=j;
	        }
	        int temp=arr[min];
	        arr[min]=arr[i];
	        arr[i]=temp;
		System.out.println(arr[i]);
	    }
	    System.out.println(arr[n-1]);
	}
}

2)Bubble sort

public class Main
{
	public static void main(String[] args) {
	    int arr[]={13,40,24,52,20,9};
	    int n=arr.length;
	    for(int i=n-1;i>=1;i--){
	        for(int j=0;j<i;j++){
	            if(arr[j]>arr[j+1]){
	                int temp=arr[j+1];
	                arr[j+1]=arr[j];
	                arr[j]=temp;
	            }
	        }
	    }
	    for(int k=0;k<n;k++){
	        System.out.println(arr[k]);
	    }
	}
}

3)Insertion sort

public class Main
{
	public static void main(String[] args) {
	    int arr[]={13,40,24,52,20,9};
	    int n=arr.length;
	    for(int i=1;i<n;i++){
	        int temp=arr[i];
	        int j=i-1;
	        while(j>=0 && arr[j]>temp){
	                arr[j+1]=arr[j];
	                j--;
	        }
	        arr[j+1]=temp;
	        }
	    for(int k=0;k<n;k++){
	        System.out.println(arr[k]);
	    }
	}
}

4)Merge sort

import java.util.*;
public class Main
{
    public static void mergeSort(int arr[],int low,int high){
        if(low>=high)
            return;
        int mid=(low+high)/2;
        mergeSort(arr,low,mid);
        mergeSort(arr,mid+1,high);
        merge(arr,low,mid,high);
    }
    
    public static void merge(int arr[],int low,int mid,int high){
        ArrayList<Integer>temp=new ArrayList<>();
        int left=low;
        int right=mid+1;
        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
                temp.add(arr[left]);
                left++;
            }
            else{
                temp.add(arr[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.add(arr[left]);
            left++;
        }
        while(right<=high){
            temp.add(arr[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp.get(i-low);
        }
    }
	public static void main(String[] args) {
	    int arr[]={3,1,2,4,1,5,2,6,4};
	    mergeSort(arr,0,arr.length-1);
	    
	    for(int val:arr){
	    	System.out.println(val);
	    }
	}
}

5) Quick sort

public class Main
{   
    public static void quicksort(int arr[],int low,int high){
        if(low<high){
        int part=sort(arr,low,high);
        quicksort(arr,low,part-1);
        quicksort(arr,part+1,high);
        }
    }
    
    public static int sort(int arr[],int low,int high){
        int pivot=arr[low];
        int i=low;
        int j=high;
        while(i<j){
            while(arr[i]<=pivot && i<=high-1)
                i++;
            while(arr[j]>pivot && j>=low+1)
                j--;
            if(i<j){
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
        int tem=arr[low];
        arr[low]=arr[j];
        arr[j]=tem;
        return j;
    }
    
	public static void main(String[] args) {
	    int arr[]={4,6,2,5,7,9,1,3};
	    quicksort(arr,0,arr.length-1);
	    for(int val:arr){
		System.out.println(val);
	    }
	}
}

6) Recursive bubble sort

public class Main
{
    public static void bubblesort(int arr[], int n){
        if(n==1)
            return;
        
        for(int j=0;j<=n-2;j++){
	            if(arr[j]>arr[j+1]){
	                int temp=arr[j+1];
	                arr[j+1]=arr[j];
	                arr[j]=temp;
	            }
        }
        bubblesort(arr,n-1);
    }
    
	public static void main(String[] args) {
	    int arr[]={13,40,24,52,20,9};
	    int n=arr.length;
	    bubblesort(arr,n);
	    for(int k=0;k<n;k++){
	        System.out.println(arr[k]);
	    }
	}
}

7) Recursive Insertion sort

public class Main
{
    public static void insertionsort(int arr[],int i,int n){
        if(i==n)
            return;
        int temp=arr[i];
	        int j=i-1;
	        while(j>=0 && arr[j]>temp){
	                arr[j+1]=arr[j];
	                j--;
	        }
	        arr[j+1]=temp;
	        insertionsort(arr,i+1,n);
    }
    
	public static void main(String[] args) {
	    int arr[]={13,40,24,52,20,9};
	    int n=arr.length;
	    insertionsort(arr,0,n);
	    for(int k=0;k<n;k++){
	        System.out.println(arr[k]);
	    }
	}
}